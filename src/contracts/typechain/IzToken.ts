/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IzTokenInterface extends utils.Interface {
  functions: {
    "UPGRADE_INTERFACE_VERSION()": FunctionFragment;
    "addParty(address,uint8,uint256,bytes)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "canTransfer(address,uint256,bytes)": FunctionFragment;
    "canTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "changeIssuer(address)": FunctionFragment;
    "compensationContract()": FunctionFragment;
    "compense(address)": FunctionFragment;
    "controllerRedeem(address,uint256,bytes,bytes)": FunctionFragment;
    "controllerTransfer(address,address,uint256,bytes,bytes)": FunctionFragment;
    "decimals()": FunctionFragment;
    "distribute(address,uint256,bytes)": FunctionFragment;
    "distributeBatch(address[],uint256[])": FunctionFragment;
    "generate(uint256,bytes)": FunctionFragment;
    "getAttachedData(address)": FunctionFragment;
    "initialize(address,address,string,string,uint256,uint256,address)": FunctionFragment;
    "isControllable()": FunctionFragment;
    "isIssuable()": FunctionFragment;
    "issue(address,uint256,bytes)": FunctionFragment;
    "issuer()": FunctionFragment;
    "minimumTransfer()": FunctionFragment;
    "minimumUserBalance()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "parties(address)": FunctionFragment;
    "partyPermission(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "redeem(uint256,bytes)": FunctionFragment;
    "redeemFrom(address,uint256,bytes)": FunctionFragment;
    "removeParty(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCompensationContract(address)": FunctionFragment;
    "setMinimumTransfer(uint256)": FunctionFragment;
    "setMinimumUserBalance(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferFromWithData(address,address,uint256,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWithData(address,uint256,bytes)": FunctionFragment;
    "unpause()": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UPGRADE_INTERFACE_VERSION"
      | "addParty"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "canTransfer"
      | "canTransferFrom"
      | "changeIssuer"
      | "compensationContract"
      | "compense"
      | "controllerRedeem"
      | "controllerTransfer"
      | "decimals"
      | "distribute"
      | "distributeBatch"
      | "generate"
      | "getAttachedData"
      | "initialize"
      | "isControllable"
      | "isIssuable"
      | "issue"
      | "issuer"
      | "minimumTransfer"
      | "minimumUserBalance"
      | "name"
      | "owner"
      | "parties"
      | "partyPermission"
      | "pause"
      | "paused"
      | "proxiableUUID"
      | "redeem"
      | "redeemFrom"
      | "removeParty"
      | "renounceOwnership"
      | "setCompensationContract"
      | "setMinimumTransfer"
      | "setMinimumUserBalance"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferFromWithData"
      | "transferOwnership"
      | "transferWithData"
      | "unpause"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addParty",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransferFrom",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeIssuer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "compensationContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "compense", values: [string]): string;
  encodeFunctionData(
    functionFragment: "controllerRedeem",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerTransfer",
    values: [string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "generate",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttachedData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isControllable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "issuer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumUserBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "parties", values: [string]): string;
  encodeFunctionData(
    functionFragment: "partyPermission",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFrom",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "removeParty", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCompensationContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumUserBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromWithData",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithData",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addParty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "compensationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "compense", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllerRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "generate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttachedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isControllable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issuer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partyPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompensationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CompensationContractChanged(address,address)": EventFragment;
    "ControllerRedemption(address,address,uint256,bytes,bytes)": EventFragment;
    "ControllerTransfer(address,address,address,uint256,bytes,bytes)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "Issued(address,address,uint256,bytes)": EventFragment;
    "MinimumTransferChanged(uint256,uint256)": EventFragment;
    "MinimumUserBalanceChanged(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PartyRemoved(address)": EventFragment;
    "PartyUpdated(address,uint8,uint256,bytes)": EventFragment;
    "Paused(address)": EventFragment;
    "Redeemed(address,address,uint256,bytes)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "changeIssuerEvent(address,address)": EventFragment;
    "executionComplete()": EventFragment;
    "partialExecution(uint256)": EventFragment;
    "transferWithDataEvent(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CompensationContractChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerRedemption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllerTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Issued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumTransferChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinimumUserBalanceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartyRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PartyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "changeIssuerEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "executionComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "partialExecution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "transferWithDataEvent"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface CompensationContractChangedEventObject {
  oldCompensationContract: string;
  newCompensationContract: string;
}
export type CompensationContractChangedEvent = TypedEvent<
  [string, string],
  CompensationContractChangedEventObject
>;

export type CompensationContractChangedEventFilter =
  TypedEventFilter<CompensationContractChangedEvent>;

export interface ControllerRedemptionEventObject {
  _controller: string;
  _tokenHolder: string;
  _value: BigNumber;
  _data: string;
  _operatorData: string;
}
export type ControllerRedemptionEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  ControllerRedemptionEventObject
>;

export type ControllerRedemptionEventFilter =
  TypedEventFilter<ControllerRedemptionEvent>;

export interface ControllerTransferEventObject {
  _controller: string;
  _from: string;
  _to: string;
  _value: BigNumber;
  _data: string;
  _operatorData: string;
}
export type ControllerTransferEvent = TypedEvent<
  [string, string, string, BigNumber, string, string],
  ControllerTransferEventObject
>;

export type ControllerTransferEventFilter =
  TypedEventFilter<ControllerTransferEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface IssuedEventObject {
  _operator: string;
  _to: string;
  _value: BigNumber;
  _data: string;
}
export type IssuedEvent = TypedEvent<
  [string, string, BigNumber, string],
  IssuedEventObject
>;

export type IssuedEventFilter = TypedEventFilter<IssuedEvent>;

export interface MinimumTransferChangedEventObject {
  oldMinimumTransfer: BigNumber;
  newMinimumTransfer: BigNumber;
}
export type MinimumTransferChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinimumTransferChangedEventObject
>;

export type MinimumTransferChangedEventFilter =
  TypedEventFilter<MinimumTransferChangedEvent>;

export interface MinimumUserBalanceChangedEventObject {
  oldMinimumUserBalance: BigNumber;
  newMinimumUserBalance: BigNumber;
}
export type MinimumUserBalanceChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinimumUserBalanceChangedEventObject
>;

export type MinimumUserBalanceChangedEventFilter =
  TypedEventFilter<MinimumUserBalanceChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PartyRemovedEventObject {
  user: string;
}
export type PartyRemovedEvent = TypedEvent<[string], PartyRemovedEventObject>;

export type PartyRemovedEventFilter = TypedEventFilter<PartyRemovedEvent>;

export interface PartyUpdatedEventObject {
  user: string;
  permission: number;
  expiration: BigNumber;
  attachedData: string;
}
export type PartyUpdatedEvent = TypedEvent<
  [string, number, BigNumber, string],
  PartyUpdatedEventObject
>;

export type PartyUpdatedEventFilter = TypedEventFilter<PartyUpdatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RedeemedEventObject {
  _operator: string;
  _from: string;
  _value: BigNumber;
  _data: string;
}
export type RedeemedEvent = TypedEvent<
  [string, string, BigNumber, string],
  RedeemedEventObject
>;

export type RedeemedEventFilter = TypedEventFilter<RedeemedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface changeIssuerEventEventObject {
  oldIssuer: string;
  newIssuer: string;
}
export type changeIssuerEventEvent = TypedEvent<
  [string, string],
  changeIssuerEventEventObject
>;

export type changeIssuerEventEventFilter =
  TypedEventFilter<changeIssuerEventEvent>;

export interface executionCompleteEventObject {}
export type executionCompleteEvent = TypedEvent<
  [],
  executionCompleteEventObject
>;

export type executionCompleteEventFilter =
  TypedEventFilter<executionCompleteEvent>;

export interface partialExecutionEventObject {
  currentIndex: BigNumber;
}
export type partialExecutionEvent = TypedEvent<
  [BigNumber],
  partialExecutionEventObject
>;

export type partialExecutionEventFilter =
  TypedEventFilter<partialExecutionEvent>;

export interface transferWithDataEventEventObject {
  from: string;
  to: string;
  value: BigNumber;
  data: string;
}
export type transferWithDataEventEvent = TypedEvent<
  [string, string, BigNumber, string],
  transferWithDataEventEventObject
>;

export type transferWithDataEventEventFilter =
  TypedEventFilter<transferWithDataEventEvent>;

export interface IzToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IzTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    addParty(
      _user: string,
      _permission: BigNumberish,
      _expiration: BigNumberish,
      _attachedData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    canTransfer(
      _to: string,
      _value: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & { result: boolean; resultCode: string }
    >;

    canTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & { result: boolean; resultCode: string }
    >;

    changeIssuer(
      _newIssuer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    compensationContract(overrides?: CallOverrides): Promise<[string]>;

    compense(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    controllerRedeem(
      _tokenHolder: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    controllerTransfer(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    distribute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    distributeBatch(
      _to: string[],
      _value: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    generate(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAttachedData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _owner: string,
      _issuer: string,
      _name: string,
      _symbol: string,
      _minimumTransfer: BigNumberish,
      _minimumUserBalance: BigNumberish,
      _compensationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isControllable(overrides?: CallOverrides): Promise<[boolean]>;

    isIssuable(overrides?: CallOverrides): Promise<[boolean]>;

    issue(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    issuer(overrides?: CallOverrides): Promise<[string]>;

    minimumTransfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumUserBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        permission: number;
        expiration: BigNumber;
        attachedData: string;
      }
    >;

    partyPermission(
      _user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    redeemFrom(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeParty(
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCompensationContract(
      _compensationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinimumTransfer(
      _minimumTransfer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMinimumUserBalance(
      _minimumUserBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFromWithData(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferWithData(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

  addParty(
    _user: string,
    _permission: BigNumberish,
    _expiration: BigNumberish,
    _attachedData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  canTransfer(
    _to: string,
    _value: BigNumberish,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & { result: boolean; resultCode: string }
  >;

  canTransferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & { result: boolean; resultCode: string }
  >;

  changeIssuer(
    _newIssuer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  compensationContract(overrides?: CallOverrides): Promise<string>;

  compense(
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  controllerRedeem(
    _tokenHolder: string,
    _value: BigNumberish,
    _data: BytesLike,
    _operatorData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  controllerTransfer(
    _from: string,
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    _operatorData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  distribute(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  distributeBatch(
    _to: string[],
    _value: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  generate(
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAttachedData(_user: string, overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: string,
    _issuer: string,
    _name: string,
    _symbol: string,
    _minimumTransfer: BigNumberish,
    _minimumUserBalance: BigNumberish,
    _compensationContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isControllable(overrides?: CallOverrides): Promise<boolean>;

  isIssuable(overrides?: CallOverrides): Promise<boolean>;

  issue(
    arg0: string,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  issuer(overrides?: CallOverrides): Promise<string>;

  minimumTransfer(overrides?: CallOverrides): Promise<BigNumber>;

  minimumUserBalance(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  parties(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, string] & {
      permission: number;
      expiration: BigNumber;
      attachedData: string;
    }
  >;

  partyPermission(
    _user: string,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  redeem(
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  redeemFrom(
    _from: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeParty(
    _user: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCompensationContract(
    _compensationContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinimumTransfer(
    _minimumTransfer: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMinimumUserBalance(
    _minimumUserBalance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFromWithData(
    _from: string,
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferWithData(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<string>;

    addParty(
      _user: string,
      _permission: BigNumberish,
      _expiration: BigNumberish,
      _attachedData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canTransfer(
      _to: string,
      _value: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & { result: boolean; resultCode: string }
    >;

    canTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & { result: boolean; resultCode: string }
    >;

    changeIssuer(_newIssuer: string, overrides?: CallOverrides): Promise<void>;

    compensationContract(overrides?: CallOverrides): Promise<string>;

    compense(_recipient: string, overrides?: CallOverrides): Promise<void>;

    controllerRedeem(
      _tokenHolder: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    controllerTransfer(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    distribute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeBatch(
      _to: string[],
      _value: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    generate(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAttachedData(_user: string, overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: string,
      _issuer: string,
      _name: string,
      _symbol: string,
      _minimumTransfer: BigNumberish,
      _minimumUserBalance: BigNumberish,
      _compensationContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isControllable(overrides?: CallOverrides): Promise<boolean>;

    isIssuable(overrides?: CallOverrides): Promise<boolean>;

    issue(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    issuer(overrides?: CallOverrides): Promise<string>;

    minimumTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    minimumUserBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, string] & {
        permission: number;
        expiration: BigNumber;
        attachedData: string;
      }
    >;

    partyPermission(
      _user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    redeem(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFrom(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeParty(_user: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCompensationContract(
      _compensationContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumTransfer(
      _minimumTransfer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumUserBalance(
      _minimumUserBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFromWithData(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithData(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "CompensationContractChanged(address,address)"(
      oldCompensationContract?: null,
      newCompensationContract?: null
    ): CompensationContractChangedEventFilter;
    CompensationContractChanged(
      oldCompensationContract?: null,
      newCompensationContract?: null
    ): CompensationContractChangedEventFilter;

    "ControllerRedemption(address,address,uint256,bytes,bytes)"(
      _controller?: null,
      _tokenHolder?: string | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): ControllerRedemptionEventFilter;
    ControllerRedemption(
      _controller?: null,
      _tokenHolder?: string | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): ControllerRedemptionEventFilter;

    "ControllerTransfer(address,address,address,uint256,bytes,bytes)"(
      _controller?: null,
      _from?: string | null,
      _to?: string | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): ControllerTransferEventFilter;
    ControllerTransfer(
      _controller?: null,
      _from?: string | null,
      _to?: string | null,
      _value?: null,
      _data?: null,
      _operatorData?: null
    ): ControllerTransferEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Issued(address,address,uint256,bytes)"(
      _operator?: string | null,
      _to?: string | null,
      _value?: null,
      _data?: null
    ): IssuedEventFilter;
    Issued(
      _operator?: string | null,
      _to?: string | null,
      _value?: null,
      _data?: null
    ): IssuedEventFilter;

    "MinimumTransferChanged(uint256,uint256)"(
      oldMinimumTransfer?: null,
      newMinimumTransfer?: null
    ): MinimumTransferChangedEventFilter;
    MinimumTransferChanged(
      oldMinimumTransfer?: null,
      newMinimumTransfer?: null
    ): MinimumTransferChangedEventFilter;

    "MinimumUserBalanceChanged(uint256,uint256)"(
      oldMinimumUserBalance?: null,
      newMinimumUserBalance?: null
    ): MinimumUserBalanceChangedEventFilter;
    MinimumUserBalanceChanged(
      oldMinimumUserBalance?: null,
      newMinimumUserBalance?: null
    ): MinimumUserBalanceChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PartyRemoved(address)"(user?: string | null): PartyRemovedEventFilter;
    PartyRemoved(user?: string | null): PartyRemovedEventFilter;

    "PartyUpdated(address,uint8,uint256,bytes)"(
      user?: string | null,
      permission?: null,
      expiration?: null,
      attachedData?: null
    ): PartyUpdatedEventFilter;
    PartyUpdated(
      user?: string | null,
      permission?: null,
      expiration?: null,
      attachedData?: null
    ): PartyUpdatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Redeemed(address,address,uint256,bytes)"(
      _operator?: string | null,
      _from?: string | null,
      _value?: null,
      _data?: null
    ): RedeemedEventFilter;
    Redeemed(
      _operator?: string | null,
      _from?: string | null,
      _value?: null,
      _data?: null
    ): RedeemedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "changeIssuerEvent(address,address)"(
      oldIssuer?: null,
      newIssuer?: null
    ): changeIssuerEventEventFilter;
    changeIssuerEvent(
      oldIssuer?: null,
      newIssuer?: null
    ): changeIssuerEventEventFilter;

    "executionComplete()"(): executionCompleteEventFilter;
    executionComplete(): executionCompleteEventFilter;

    "partialExecution(uint256)"(
      currentIndex?: null
    ): partialExecutionEventFilter;
    partialExecution(currentIndex?: null): partialExecutionEventFilter;

    "transferWithDataEvent(address,address,uint256,bytes)"(
      from?: null,
      to?: null,
      value?: null,
      data?: null
    ): transferWithDataEventEventFilter;
    transferWithDataEvent(
      from?: null,
      to?: null,
      value?: null,
      data?: null
    ): transferWithDataEventEventFilter;
  };

  estimateGas: {
    UPGRADE_INTERFACE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addParty(
      _user: string,
      _permission: BigNumberish,
      _expiration: BigNumberish,
      _attachedData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    canTransfer(
      _to: string,
      _value: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeIssuer(
      _newIssuer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    compensationContract(overrides?: CallOverrides): Promise<BigNumber>;

    compense(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    controllerRedeem(
      _tokenHolder: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    controllerTransfer(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    distribute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    distributeBatch(
      _to: string[],
      _value: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    generate(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAttachedData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      _issuer: string,
      _name: string,
      _symbol: string,
      _minimumTransfer: BigNumberish,
      _minimumUserBalance: BigNumberish,
      _compensationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isControllable(overrides?: CallOverrides): Promise<BigNumber>;

    isIssuable(overrides?: CallOverrides): Promise<BigNumber>;

    issue(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuer(overrides?: CallOverrides): Promise<BigNumber>;

    minimumTransfer(overrides?: CallOverrides): Promise<BigNumber>;

    minimumUserBalance(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parties(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    partyPermission(
      _user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    redeemFrom(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeParty(
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCompensationContract(
      _compensationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinimumTransfer(
      _minimumTransfer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMinimumUserBalance(
      _minimumUserBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFromWithData(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferWithData(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    UPGRADE_INTERFACE_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addParty(
      _user: string,
      _permission: BigNumberish,
      _expiration: BigNumberish,
      _attachedData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    canTransfer(
      _to: string,
      _value: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canTransferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeIssuer(
      _newIssuer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    compensationContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    compense(
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    controllerRedeem(
      _tokenHolder: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    controllerTransfer(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      _operatorData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distribute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    distributeBatch(
      _to: string[],
      _value: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    generate(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAttachedData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _issuer: string,
      _name: string,
      _symbol: string,
      _minimumTransfer: BigNumberish,
      _minimumUserBalance: BigNumberish,
      _compensationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isControllable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isIssuable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issue(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumTransfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumUserBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parties(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    partyPermission(
      _user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    redeemFrom(
      _from: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeParty(
      _user: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCompensationContract(
      _compensationContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinimumTransfer(
      _minimumTransfer: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMinimumUserBalance(
      _minimumUserBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFromWithData(
      _from: string,
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferWithData(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
